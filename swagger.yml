openapi: 3.0.0
info:
  title: Artemis API
  description: |
    API Documentation for the Artemis API

    # Authentication
    To access the API you must first obtain a JWT token. To get a JWT token you must follow these steps:
    1. Log on to the [Artemis](https://dev.artemis.app) web site.
    2. Create a new patient on the patients page.
    3. Use the information in the QR Code to register your device.

    # QR Code
    The QR Code returns the following JSON:

    {
      "device_token": "oJ5nU44b6M_OFGwnaCgHXDC4ZHXWQP-pTJt8W4thCqc=",
      "api_url": "https://dev-api.artemis.app"
    }


    # Confirming a device
    A device is confirmed by using the Confirm Device service. This service returns a JWT
    that must be included in the Authorization header of all subsequent requests.

    # Using the API
    To use the Artemis API a valid JWT must be included in the Authorization header of each request using the Bearer scheme.
    The JWT contains the following information:
    - Device ID
    - Patient ID
    - Organization ID

    # Date / Time Formats
    The API uses [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formats for storing dates and times:

    ### Examples:
    - Date only: 2021-05-06 (YYYY-MM-DD)
    - Date-time: 2021-05-06T14:30:00Z (UTC)
    - Date-time with timezone: 2021-05-06T14:30:00+01:00

    # API Versioning
    This API uses URI versioning. The current version is v1.
    Breaking changes will result in a new API version (e.g., v2).

  version: '1.0.0'
servers:
  - url: https://api.artemis.app
    description: Production server
  - url: https://qa-api.artemis.app
    description: QA server
tags:
  - name: Sessions
    description: Session management operations
  - name: Users
    description: User account management operations
  - name: Patients
    description: Patient data management operations
  - name: Devices
    description: Device management and confirmation operations
  - name: Organizations
    description: Organization management operations
  - name: Orders
    description: Order management operations
  - name: Modules
    description: Module test operations and data collection
  - name: Requests
    description: Request management operations
paths:
  /v1/sessions:
    post:
      summary: Create session
      description: Create a new session.
      tags:
        - Sessions
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Show session
      description: Show a session.
      tags:
        - Sessions
      security:
        - CookieAuth: []
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete session
      description: Delete a session.
      security:
        - CookieAuth: []
      tags:
        - Sessions
      responses:
        '200':
          description: Session deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/confirmations/{confirmationToken}:
    post:
      operationId: checkUserConfirmation
      summary: Check user confirmation
      description: Verify if the user's confirmation token is valid.
      tags:
        - Users
      parameters:
        - name: confirmationToken
          in: path
          required: true
          schema:
            type: string
          description: Confirmation Token
      responses:
        '200':
          description: Confirmation checked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckConfirmUserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/{userID}/confirmations/confirm:
    post:
      operationId: confirmUserAccount
      summary: Confirm user account
      description: Confirm a user's account using their user ID.
      tags:
        - Users
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConfirm'
      responses:
        '200':
          description: User confirmed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/locked/{lockedToken}:
    post:
      operationId: unlockUserAccount
      summary: Unlock user account
      description: Unlock a user's account using the locked token.
      tags:
        - Users
      parameters:
        - name: lockedToken
          in: path
          required: true
          schema:
            type: string
          description: Locked Token
      responses:
        '200':
          description: User unlocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/passwords/{resetPasswordToken}:
    post:
      summary: Check reset password token
      description: Verify if the reset password token is valid.
      tags:
        - Users
      parameters:
        - name: resetPasswordToken
          in: path
          required: true
          schema:
            type: string
          description: Reset Password Token
      responses:
        '200':
          description: Reset password token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckResetPasswordResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/{userID}/reset-password:
    post:
      summary: Reset user password
      description: Reset a user's password using their user ID.
      tags:
        - Users
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/troubleshoot:
    post:
      summary: Troubleshoot user issues
      description: Endpoint for troubleshooting user issues.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TroubleshootRequest'
      responses:
        '200':
          description: Troubleshooting information provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/{userID}/update-password:
    post:
      summary: Update user password
      description: Update the password for a specific user.
      tags:
        - Users
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRequest'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/users:
    get:
      summary: List users
      description: Get a list of users in the organization.
      tags:
        - Users
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          schema:
            type: string
            enum: [name_asc, name_desc, created_at_asc, created_at_desc]
        - name: role
          in: query
          schema:
            type: string
            enum: [user, admin, super_admin]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPaginationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create user
      description: Create a new user in the organization.
      tags:
        - Users
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/users/{userID}:
    get:
      summary: Get user
      description: Retrieve user information.
      tags:
        - Users
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: userID
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update user
      description: Update user information.
      tags:
        - Users
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: userID
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/patients:
    get:
      summary: List patients
      description: Get a list of all patients in the organization.
      tags:
        - Patients
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
      responses:
        '200':
          description: List of patients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientPaginationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createPatient
      summary: Create patient
      description: Create a new patient in the organization.
      tags:
        - Patients
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Organization ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientRequest'
            examples:
              basic:
                summary: Basic patient creation
                value:
                  first_name: 'John'
                  last_name: 'Doe'
                  date_of_birth: '1980-01-01'
                  mrn: 'MRN123456'
              complete:
                summary: Complete patient creation
                value:
                  first_name: 'John'
                  last_name: 'Doe'
                  date_of_birth: '1980-01-01'
                  mrn: 'MRN123456'
                  # additional optional fields...
      responses:
        '201':
          description: Patient created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/users/{userID}/enable:
    post:
      summary: Enable user
      description: Enable a user.
      tags:
        - Users
      security:
        - CookieAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
          description: User ID
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
      responses:
        '200':
          description: User enabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/users/{userID}/disable:
    post:
      summary: Disable user
      description: Disable a user.
      tags:
        - Users
      security:
        - CookieAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
          description: User ID
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
      responses:
        '200':
          description: User disabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/users/{userID}/change-current-org:
    post:
      summary: Change current organization
      description: Change the current organization for a user.
      tags:
        - Users
      security:
        - CookieAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
          description: User ID
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
      responses:
        '200':
          description: User changed current organization successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/devices/{deviceID}/deactivate:
    post:
      summary: Deactivate device
      description: Deactivate a device.
      tags:
        - Devices
      security:
        - CookieAuth: []
      parameters:
        - name: deviceID
          in: path
          required: true
          schema:
            type: string
          description: Device ID
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
      responses:
        '200':
          description: Device deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations:
    post:
      summary: Create organization
      description: Create a new organization.
      tags:
        - Organizations
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRequest'
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List organizations
      description: Get a list of all organizations.
      tags:
        - Organizations
      security:
        - CookieAuth: []
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}:
    get:
      summary: Show organization
      description: Show an organization.
      tags:
        - Organizations
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update organization
      description: Update an organization.
      tags:
        - Organizations
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRequest'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/requests:
    get:
      summary: List requests
      description: Get a list of all requests for an organization.
      tags:
        - Requests
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
      responses:
        '200':
          description: List of requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/mobile/devices/confirm:
    post:
      summary: Confirm device
      description: Confirm a device using the provided confirmation code.
      tags:
        - Devices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceConfirmRequest'
      responses:
        '200':
          description: Device confirmed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceConfirmResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/mobile/modules:
    post:
      summary: Create module test
      description: Create a new module test using mobile authentication.
      tags:
        - Modules
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleTestRequest'
      responses:
        '201':
          description: Module test created successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/mobile/orders:
    get:
      summary: Show orders
      description: Get the current order for a patient.
      tags:
        - Orders
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Get current order
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/devices/{deviceID}/resend-instructions:
    post:
      summary: Resend device instructions
      description: Resends the instructions for device setup to the user.
      tags:
        - Devices
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: deviceID
          in: path
          required: true
          schema:
            type: string
          description: Device ID
      responses:
        '200':
          description: Instructions resent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/devices/{deviceID}/regenerate-keys:
    post:
      summary: Regenerate device keys
      description: Regenerates the authentication keys for a device.
      tags:
        - Devices
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: deviceID
          in: path
          required: true
          schema:
            type: string
          description: Device ID
      responses:
        '200':
          description: Keys regenerated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/patients/search:
    get:
      summary: Search patients
      description: Search for patients in the organization.
      tags:
        - Patients
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: query
          in: query
          schema:
            type: string
          description: Search query string
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientPaginationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/organizations/{organizationID}/requests/{requestID}/download:
    get:
      summary: Download request data
      description: Download data associated with a specific request.
      tags:
        - Requests
      security:
        - CookieAuth: []
      parameters:
        - name: organizationID
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: requestID
          in: path
          required: true
          schema:
            type: string
          description: Request ID
      responses:
        '200':
          description: Request data downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/mobile/requests/{requestID}:
    get:
      summary: Get mobile request
      description: Get request details for mobile clients.
      tags:
        - Requests
      security:
        - BearerAuth: []
      parameters:
        - name: requestID
          in: path
          required: true
          schema:
            type: string
          description: Request ID
      responses:
        '200':
          description: Request details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Authentication failed or not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Resource does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained after device confirmation or user login
    BasicAuth:
      type: http
      scheme: basic
      description: Basic authentication using email and password
    CookieAuth:
      type: apiKey
      in: cookie
      name: SESSION_ID
      description: Session cookie obtained after successful authentication
  schemas:
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message detailing what went wrong.
          example: 'Invalid request parameters.'
    ResponseStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
    Status:
      type: object
      properties:
        message:
          type: string
          description: Status message indicating the result of the operation.
          example: 'Password reset successful.'
        code:
          type: integer
          description: Numerical code representing the status.
          example: 200
    UserConfirm:
      type: object
      required:
        - confirmation_token
        - password
        - password_confirmation
      properties:
        confirmation_token:
          type: string
          description: Token sent to the user's email for confirmation.
          example: 'abc123def456ghi789'
        password:
          type: string
          format: password
          description: New password chosen by the user.
          example: 'SecurePass123'
        password_confirmation:
          type: string
          format: password
          description: Confirmation of the new password.
          example: 'SecurePass123'
    CheckConfirmUserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the user.
          example: '550e8400-e29b-41d4-a716-446655440000'
        email:
          type: string
          format: email
          description: Email address of the user.
          example: 'user@example.com'
    ResetPasswordRequest:
      type: object
      required:
        - reset_password_token
        - password
        - password_confirmation
        - email
      properties:
        reset_password_token:
          type: string
          description: Token used to reset the password.
          example: 'reset123token456'
        password:
          type: string
          format: password
          description: New password chosen by the user.
          example: 'NewSecurePass123'
        password_confirmation:
          type: string
          format: password
          description: Confirmation of the new password.
          example: 'NewSecurePass123'
        email:
          type: string
          format: email
          description: Email address of the user.
          example: 'user@example.com'
    TroubleshootRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address associated with the account needing troubleshooting.
          example: 'user@example.com'
    PasswordRequest:
      type: object
      required:
        - current_password
        - password
        - password_confirmation
        - email
      properties:
        current_password:
          type: string
          format: password
          description: User's current password.
          example: 'CurrentPass123'
        password:
          type: string
          format: password
          description: New password to be set.
          example: 'NewPass123'
        password_confirmation:
          type: string
          format: password
          description: Confirmation of the new password.
          example: 'NewPass123'
        email:
          type: string
          format: email
          description: User's email address.
          example: 'user@example.com'
    UserRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
        - role
        - organization_ids
      properties:
        first_name:
          type: string
          description: User's first name.
          example: 'John'
          minLength: 1
          maxLength: 50
          pattern: "^[A-Za-z ,.'-]+$"
        last_name:
          type: string
          description: User's last name.
          example: 'Doe'
          minLength: 1
          maxLength: 50
          pattern: "^[A-Za-z ,.'-]+$"
        email:
          type: string
          format: email
          description: User's email address.
          example: 'john.doe@example.com'
        phone:
          type: string
          description: User's phone number.
          example: '+1-555-123-4567'
          pattern: "^\\+?[1-9]\\d{1,14}(-[0-9]+)*$"
        role:
          type: string
          description: User's role within the organization.
          enum:
            - user
            - admin
            - super_admin
          example: 'admin'
        organization_ids:
          type: array
          description: List of organization IDs the user is associated with.
          items:
            type: string
            format: uuid
            example: '550e8400-e29b-41d4-a716-446655440000'
        password:
          type: string
          description: User's password (only required for new users).
          minLength: 8
          maxLength: 128
          pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
    UserUpdateRequest:
      type: object
      required:
        - first_name
        - last_name
        - role
        - organization_ids
      properties:
        first_name:
          type: string
          description: User's first name.
          example: 'Jane'
        last_name:
          type: string
          description: User's last name.
          example: 'Smith'
        phone:
          type: string
          description: User's phone number.
          example: '+1-555-765-4321'
        role:
          type: string
          description: User's role within the organization.
          enum:
            - user
            - admin
            - super_admin
          example: 'user'
        organization_ids:
          type: array
          description: List of organization IDs the user is associated with.
          items:
            type: string
            format: uuid
            example: '550e8400-e29b-41d4-a716-446655440001'
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the user.
          example: '550e8400-e29b-41d4-a716-446655440000'
        first_name:
          type: string
          description: User's first name.
          example: 'John'
        last_name:
          type: string
          description: User's last name.
          example: 'Doe'
        email:
          type: string
          format: email
          description: User's email address.
          example: 'john.doe@example.com'
        role:
          type: string
          description: User's role within the organization.
          example: 'admin'
        phone:
          type: string
          description: User's phone number.
          example: '+1-555-123-4567'
        active:
          type: boolean
          description: Indicates if the user account is active.
          example: true
        locked:
          type: boolean
          description: Indicates if the user account is locked.
          example: false
        email_confirmed:
          type: boolean
          description: Indicates if the user's email has been confirmed.
          example: true
        current_organization_id:
          type: string
          format: uuid
          description: ID of the user's current organization.
          example: '550e8400-e29b-41d4-a716-446655440002'
        password_expiration_date:
          type: string
          format: date-time
          description: Date and time when the user's password will expire.
          example: '2024-12-31T23:59:59Z'
        last_login_date:
          type: string
          format: date-time
          description: Date and time of the user's last login.
          example: '2023-11-27T10:15:30Z'
        organizations:
          type: array
          description: List of organizations the user belongs to.
          items:
            $ref: '#/components/schemas/OrganizationResponse'
    UserPaginationResponse:
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/PaginationResponse'
        data:
          type: array
          description: List of users.
          items:
            $ref: '#/components/schemas/UserResponse'
    OrganizationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the organization.
          example: '550e8400-e29b-41d4-a716-446655440002'
        name:
          type: string
          description: Name of the organization.
          example: 'Healthcare Corp'
        city:
          type: string
          description: City where the organization is located.
          example: 'New York'
        state:
          type: string
          description: State where the organization is located.
          example: 'NY'
        country:
          type: string
          description: Country where the organization is located.
          example: 'USA'
        emr_enabled:
          type: boolean
          description: Indicates if EMR (Electronic Medical Records) is enabled.
          example: true
        emr_gateway:
          type: string
          description: URL of the EMR gateway.
          example: 'https://emr.healthcarecorp.com'
        subdomain:
          type: string
          description: Subdomain used by the organization.
          example: 'healthcarecorp'
        created_at:
          type: string
          format: date-time
          description: Date and time when the organization was created.
          example: '2023-01-15T08:00:00Z'
    PaginationResponse:
      type: object
      properties:
        count:
          type: integer
          description: Total number of items available.
          example: 100
        page:
          type: integer
          description: Current page number.
          example: 1
        page_count:
          type: integer
          description: Total number of pages available.
          example: 10
    PatientRequest:
      type: object
      required:
        - first_name
        - last_name
        - date_of_birth
        - mrn
      properties:
        first_name:
          type: string
          description: Patient's first name.
          example: 'Alice'
        last_name:
          type: string
          description: Patient's last name.
          example: 'Brown'
        date_of_birth:
          type: string
          format: date
          description: Patient's date of birth.
          example: '1980-05-20'
        mrn:
          type: string
          description: Medical Record Number of the patient.
          example: 'MRN123456'
    PatientResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the patient.
          example: '550e8400-e29b-41d4-a716-446655440003'
        first_name:
          type: string
          description: Patient's first name.
          example: 'Alice'
        last_name:
          type: string
          description: Patient's last name.
          example: 'Brown'
        date_of_birth:
          type: string
          format: date
          description: Patient's date of birth.
          example: '1980-05-20'
        mrn:
          type: string
          description: Medical Record Number of the patient.
          example: 'MRN123456'
        last_assessment_date:
          type: string
          format: date-time
          description: Date and time of the patient's last assessment.
          example: '2023-11-25T14:30:00Z'
        orders:
          type: array
          description: List of orders associated with the patient.
          items:
            $ref: '#/components/schemas/OrderResponse'
        devices:
          type: array
          description: List of devices associated with the patient.
          items:
            $ref: '#/components/schemas/DeviceResponse'
    PatientPaginationResponse:
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/PaginationResponse'
        data:
          type: array
          description: List of patients.
          items:
            $ref: '#/components/schemas/PatientResponse'
    OrderResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the order.
          example: '550e8400-e29b-41d4-a716-446655440004'
        name:
          type: string
          description: Name of the order.
          example: 'Blood Test Order'
        start_date:
          type: string
          format: date
          description: Start date of the order.
          example: '2023-11-01'
        end_date:
          type: string
          format: date
          description: End date of the order.
          example: '2023-11-30'
        recurrence:
          type: string
          description: Recurrence pattern of the order.
          enum:
            - none
            - daily
            - weekly
            - bi_weekly
            - monthly
            - twice_monthly
            - quarterly
        completion_percentage:
          type: float
          description: Completion percentage of the order.
          example: 50.0
        next_occurrence:
          type: string
          format: date
          description: Next occurrence date of the order.
          example: '2023-11-15'
        module_list:
          type: array
          description: List of modules included in the order.
          items:
            type: string
            enum:
              - ata
              - att
              - fma
              - fta
              - mh
              - pta
              - ptt
              - rta
              - sba
              - sda
              - survey
              - wra
    DeviceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the device.
          example: 'ECG Monitor'
    DeviceResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the device.
          example: '550e8400-e29b-41d4-a716-446655440005'
        name:
          type: string
          description: Name of the device.
          example: 'ECG Monitor'
        active:
          type: boolean
          description: Indicates if the device is active.
          example: true
        confirmed:
          type: boolean
          description: Indicates if the device has been confirmed.
          example: true
        last_used:
          type: string
          format: date-time
          description: Date and time when the device was last used.
          example: '2023-11-26T09:00:00Z'
        app_version:
          type: string
          description: Version of the application installed on the device.
          example: '1.0.5'
        os_version:
          type: string
          description: Operating system version of the device.
          example: 'iOS 14.2'
        qr_code:
          $ref: '#/components/schemas/QRCodeResponse'
    DevicePaginationResponse:
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/PaginationResponse'
        data:
          type: array
          description: List of devices.
          items:
            $ref: '#/components/schemas/DeviceResponse'
    DeviceConfirmRequest:
      type: object
      required:
        - patient_dob
        - device_token
        - app_version
        - os_version
      properties:
        device_token:
          type: string
          description: Token of the device to confirm.
          example: 'deviceToken123'
        patient_dob:
          type: string
          description: Date of birth of the patient.
          example: '1980-05-20'
        app_version:
          type: string
          description: Version of the application on the device.
          example: '1.0.5'
        os_version:
          type: string
          description: Operating system version of the device.
          example: 'iOS 14.2'
    DeviceConfirmResponse:
      type: object
      properties:
        jwt:
          type: string
          description: JWT token assigned to the confirmed device
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ'
    QRCodeResponse:
      type: object
      properties:
        device_token:
          type: string
          description: Token associated with the device.
          example: 'deviceToken123'
        api_url:
          type: string
          format: uri
          description: API URL for the device to communicate with.
          example: 'https://api.yourdomain.com'
    ModuleData:
      type: object
      required:
        - key
        - started_at
        - ended_at
        - version
        - data
      properties:
        key:
          type: string
          description: Key identifying the module type.
          example: 'memory_test'
        started_at:
          type: string
          format: date-time
          description: Timestamp when the module test started.
          example: '2023-11-27T10:05:00Z'
        ended_at:
          type: string
          format: date-time
          description: Timestamp when the module test ended.
          example: '2023-11-27T10:10:00Z'
        version:
          type: string
          description: Version of the module.
          example: 'v1.2'
        canceled:
          type: boolean
          description: Indicates if the module test was canceled.
          example: false
        data:
          type: object
          description: Data collected during the module test.
          example:
            score: 85
            details: 'Patient performed well on the memory test.'

    ModuleTestRequest:
      type: object
      required:
        - order_id
        - started_at
        - ended_at
        - data
      properties:
        request_id:
          type: string
          format: uuid
          description: ID of the request associated with the assessment.
          example: '550e8400-e29b-41d4-a716-446655440004'
        order_id:
          type: string
          format: uuid
          description: ID of the order associated with the assessment.
          example: '550e8400-e29b-41d4-a716-446655440004'
        started_at:
          type: string
          format: date-time
          description: Timestamp when the assessment started.
          example: '2023-11-27T10:00:00Z'
        ended_at:
          type: string
          format: date-time
          description: Timestamp when the assessment ended.
          example: '2023-11-27T10:30:00Z'
        data:
          $ref: '#/components/schemas/ModuleData'
    S3Request:
      type: object
      required:
        - body
        - headers
        - url
      properties:
        body:
          type: object
          description: Body of the S3 request.
          example:
            data: 'Base64EncodedData'
        headers:
          type: object
          description: Headers included in the S3 request.
          additionalProperties:
            type: array
            items:
              type: string
          example:
            Content-Type:
              - 'application/json'
            Authorization:
              - 'Bearer s3token123'
        url:
          type: string
          format: uri
          description: URL for the S3 request.
          example: 'https://s3.amazonaws.com/bucketname/objectkey'
    CheckResetPasswordResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        token_valid:
          type: boolean
          description: Indicates if the reset password token is valid
    SessionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
    OrganizationRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    RequestResponse:
      required:
        - id
        - code
        - description
        - created_at
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: integer
          description: |
            Status code values:
            - 40: Request Received
            - 50: Request Stored in S3
            - 60: Request Failed to Store in S3
            - 70: Request Failed
            - 80: Request Success
          enum:
            - 40
            - 50
            - 60
            - 70
            - 80
        description:
          type: string
        created_at:
          type: string
    OrganizationId:
      name: organizationID
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier of the organization
    UserId:
      name: userID
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier of the user
