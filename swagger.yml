openapi: 3.1.0
info:
  title: MMC Gait Assessment API
  version: "1.0.0"
  description: |
    ## MMC Gait Project – API Documentation

    This API defines the services powering the MMC Gait Assessment System,
    which supports full patient flow through a walk test involving photogates,
    synchronized Orbbec cameras, and real-time processing.

    ### 🧭 System Components

    #### 🖥️ Kiosk (Patient-Facing)
    - QR/manual ID input
    - Sends ID to Relay (for tagging)
    - Displays system readiness + instructions
    - Begins test after first photogate triggers
    - Shows raw output after test

    #### 🧠 Relay Server (Coordinator)
    - Starts/stops cameras
    - Tracks photogates via DAQ
    - Orchestrates system state
    - Sends/receives data from Kiosk + Visionary

    #### 🧬 Visionary Server (Processor)
    - Processes raw gait footage
    - Sends back structured gait data

    ### ✅ Demo Flow
    1. **Check-in** via Kiosk
    2. **Relay arms system**
    3. **Cameras + DAQ capture** triggered by photogates
    4. **Visionary processes gait**
    5. **Relay returns output** to Kiosk

    ### 📦 API Domains
    - **Kiosk**: Assessment check-in, state display, data receipt
    - **Relay**: Start/stop coordination, central status tracking
    - **Visionary**: Raw data ingestion and analytics

servers:
  - url: http://localhost

tags:
  - name: Kiosk
    description: Patient-facing interface and display
  - name: Relay
    description: Central coordinator of assessment hardware
  - name: Visionary
    description: Handles camera data processing and result return

paths:
  /kiosk/assessment/store:
    post:
      tags: [Kiosk]
      summary: Store local assessment data
      operationId: storeAssessmentKiosk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assessment'
      responses:
        '200':
          description: Assessment stored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /kiosk/assessment/status/update:
    post:
      tags: [Kiosk]
      summary: Update the current status of an in-progress assessment on the kiosk
      operationId: updateAssessmentStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssessmentStatusRequest'
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: boolean
                    example: true

  /relay/assessment/prepare:
    post:
      tags: [Relay]
      summary: Prepare for patient assessment coordination
      operationId: prepareForAssessment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patient_id:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440000"
              required: [patient_id]
      responses:
        '200':
          description: Preparation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  prepared:
                    type: boolean
                  next_step:
                    type: string

  /relay/assessment/store:
    post:
      tags: [Relay]
      summary: Store assessment after processing (from Visionary)
      operationId: storeAssessmentRelay
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assessment'
      responses:
        '200':
          description: Assessment stored successfully by Relay
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  stored_at:
                    type: string
                    format: date-time

  /visionary/assessment/process:
    post:
      tags: [Visionary]
      summary: Process camera-based assessment (e.g., gait analysis)
      operationId: processCameraAssessment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GaitAssessmentRequest'
      responses:
        '200':
          description: Assessment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'

components:
  schemas:
    Patient:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        status:
          type: string
          enum: [waiting, ready, in_progress, done]
      required: [id, status]

    Assessment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "111e8400-e29b-41d4-a716-446655440abc"
        patient_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        data:
          type: object
          additionalProperties: true
      required: [patient_id, data]

    GaitAssessmentRequest:
      type: object
      properties:
        patient_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        csn:
          type: string
        camera_data:
          type: object
          additionalProperties: true
      required: [patient_id, camera_data]

    UpdateAssessmentStatusRequest:
      type: object
      properties:
        assessment_id:
          type: string
          format: uuid
          example: "111e8400-e29b-41d4-a716-446655440abc"
        state:
          type: string
          description: >
            Represents the current state of the assessment. Can indicate progress or failure.
          enum:
            - not_ready
            - ready
            - waiting_for_trigger
            - capturing
            - analyzing
            - complete
            - error
          example: capturing
        error_message:
          type: string
          description: Optional message to include if state is 'error'
          example: "Camera connection lost during capture"
      required: [assessment_id, state]

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
